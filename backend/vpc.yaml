---
AWSTemplateFormatVersion: '2010-09-09'

Description: |
  Creates VPC resources including:
    - Public and private subnets
    - Public and private security groups
    - Internet and NAT gateways

Parameters:
  DbPort:
    Type: Number
    Default: 3306

Mappings:
  CidrMap:
    Vpc:
      Cidr: 192.168.16.0/20
    PublicA:
      Cidr: 192.168.16.0/24
    PublicB:
      Cidr: 192.168.17.0/24
    PrivateA:
      Cidr: 192.168.18.0/23
    PrivateB:
      Cidr: 192.168.20.0/23

Resources:
  DeploymentVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [ CidrMap, Vpc, Cidr ]
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-vpc"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-igw"

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref DeploymentVPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref DeploymentVPC
      CidrBlock: !FindInMap [ CidrMap, PublicA, Cidr ]
      AvailabilityZone: 
        Fn::Select:
          - 0
          - Fn::GetAZs: !Ref AWS::Region
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PublicSubnetA"

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref DeploymentVPC
      CidrBlock: !FindInMap [ CidrMap, PublicB, Cidr ]
      AvailabilityZone: 
        Fn::Select:
          - 1
          - Fn::GetAZs: !Ref AWS::Region
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PublicSubnetB"

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref DeploymentVPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-public-rt"

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      GatewayId: !Ref InternetGateway
      DestinationCidrBlock: 0.0.0.0/0

  PublicSubnetRouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable

# NAT GW

  NatEIP:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-eip"

  NatGateway:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIP.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-nat-gw"

# 
# Private subnets
#

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref DeploymentVPC
      CidrBlock: !FindInMap [ CidrMap, PrivateA, Cidr ]
      AvailabilityZone: 
        Fn::Select:
          - 0
          - Fn::GetAZs: !Ref AWS::Region
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PrivateSubnetA"

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref DeploymentVPC
      CidrBlock: !FindInMap [ CidrMap, PrivateB, Cidr ]
      AvailabilityZone: 
        Fn::Select:
          - 1
          - Fn::GetAZs: !Ref AWS::Region
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PrivateSubnetB"

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref DeploymentVPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-private-rt"

  PrivateRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      NatGatewayId: !Ref NatGateway
      DestinationCidrBlock: 0.0.0.0/0

  PrivateSubnetRouteTableAssocationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetRouteTableAssocationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTable

  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub "${AWS::StackName} Service Security Group"
      VpcId: !Ref DeploymentVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0

  DbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable containers ingress to DB
      VpcId: !Ref DeploymentVPC

  DbSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: !Ref DbPort
      ToPort: !Ref DbPort
      GroupId: !Ref DbSecurityGroup
      SourceSecurityGroupId: !Ref ContainerSecurityGroup

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP ingress to ALB
      VpcId: !Ref DeploymentVPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80

Outputs:
  VPCCidrBlock:
    Value: !GetAtt DeploymentVPC.CidrBlock
    Description: Deployment VPC CIDR Block

  VPCId:
    Value: !Ref DeploymentVPC
    Description: Deployment VPC Id

  PublicSubnetIdA:
    Value: !Ref PublicSubnetA

  PublicSubnetIdB:
    Value: !Ref PublicSubnetB

  PrivateSubnetIdA:
    Value: !Ref PrivateSubnetA

  PrivateSubnetIdB:
    Value: !Ref PrivateSubnetB

  ContainerSecurityGroupRef:
    Value: !Ref ContainerSecurityGroup

  ALBSecurityGroupRef:
    Value: !Ref ALBSecurityGroup

  DbSecurityGroupRef:
    Value: !Ref DbSecurityGroup
